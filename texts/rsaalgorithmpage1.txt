What follows is a straightforward mathematical description of the mechanics of RSA encryption and decryption.

1. Alice picks two giant prime numbers, p and q. The primes should be enormous, but for simplicity Alice chooses
p=17, q=11. She must keep these numbers secret.

2. Alice multiplies them together to get another number, N. In this case N=187. She now picks another number e,
and in this case she chooses e = 7. (e and (p-1)x(q-1) should be relatively prime, but this is a technicality.)

3. Alice can now publish e and N in something akin to a telephone directory. Since these two numbers are necessary
for encryption, they must be available to anybody who might want to encrypt a message to Alice. Together these
numbers are called the public-key. (As well as being part of Alice's public-key, e could also be part of everybody else's
public-key. However, everybody must have a different value of N, dependent on their choice of p and q.)

4. To encrypt a message, the message must first be converted into a number, M. For example, aword is changed
into ASCII binary digits, and the binary digits can be considered as a decimal number. M is then encrypted to give
the ciphertext, C, according to the formula, C 2 Me (mod N)

5. Imagine that Bob wants to send Alice a simple kiss: just the letter X. In ASCII this is represented by 1011000,
which is equivalent to 88 in decimal. So, M = 88.

6. To encrypt this message, Bob begins by looking up Alice's public-key, N=187 and e = 7. This provides him with
the formula required to encrypt messages to Alice. With M = 88, the formula gives: C = 887 (mod 187)

7. Working this out on a calculator is difficult. The display cannot cope with large numbers, but there is a trick for
calculating exponentials in modular arithmetic. We start by breaking down 887:
